{"version":3,"file":"370.cff6b17402784af4.js","mappings":"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","names":["CELL_TYPE_ITEM","CELL_TYPE_HEADER","CELL_TYPE_FOOTER","createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","offset","len","cells","end","i","item","value","push","index","height","reads","visible","VirtualScroll","constructor","hostRef","registerInstance","this","range","length","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","itemsChanged","componentWillLoad","console","warn","connectedCallback","_this","_asyncToGenerator","contentEl","closest","scrollEl","getScrollElement","updateState","error","componentDidUpdate","disconnectedCallback","undefined","onResize","positionForItem","Promise","resolve","positionForIndex","heightIndex","cell","find","c","getHeightIndex","checkRange","_this2","cellIndex","findCellIndex","findIndex","inplaceUpdate","dst","src","Math","max","scheduleUpdate","checkEnd","_this3","timerUpdate","clearTimeout","readTask","readVS","bind","writeTask","writeVS","topOffset","node","offsetTop","offsetParent","offsetHeight","scrollTop","dirtyIndex","viewport","getViewport","vierportHeight","margin","top","bottom","getRange","buffer","topPos","bottomPos","min","getShouldUpdate","currentRange","updateVDom","dom","change","d","toMutate","n","pool","filter","forEach","nodeRender","doRender","updateCellHeight","_a","Array","from","tagName","childrenNu","child","newChild","classList","add","appendChild","$ionCell","style","transform","remove","domRender","renderItem","forceUpdate","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","setTimeout","shouldEnable","enableScrollEvents","Infinity","calcHeightIndex","resizeBuffer","buf","Uint32Array","newBuf","set","subarray","acum","shouldListen","rmEvent","addEventListener","removeEventListener","renderVirtualNode","renderHeader","renderFooter","render","h","Host","VirtualProxy","map","getElement","watchers","utils","vattrs","classes","class","Object","assign"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-8e692445.js';\nimport { c as componentOnReady } from './helpers-3b390e48.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  }\n  // try to match into exisiting dom\n  const toMutate = [];\n  const end = range.offset + range.length;\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find((n) => n.d && n.cell === cell);\n    if (node) {\n      const top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    }\n    else {\n      toMutate.push(cell);\n    }\n  }\n  // needs to append\n  const pool = dom.filter((n) => n.d);\n  for (const cell of toMutate) {\n    const node = pool.find((n) => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    }\n    else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index],\n      });\n    }\n  }\n  dom\n    .filter((n) => n.d && n.top !== -9999)\n    .forEach((n) => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  var _a;\n  const children = Array.from(el.children).filter((n) => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      }\n      else {\n        const newChild = createNode(el, cell.type);\n        child = (_a = nodeRender(newChild, cell, i)) !== null && _a !== void 0 ? _a : newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    }\n    else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    }\n    // update visibility\n    const visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      }\n      else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n  if (template && el.ownerDocument !== null) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM:\n      return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER:\n      return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER:\n      return el.querySelector('template[name=footer]');\n  }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin,\n  };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom;\n  // find top index\n  let i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  const offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return dirtyIndex <= end || currentRange.offset !== range.offset || currentRange.length !== range.length;\n};\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  }\n  else if (index === max + 1) {\n    return cells.length;\n  }\n  else {\n    return cells.findIndex((c) => c.index === index);\n  }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight,\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight,\n    });\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight,\n        });\n      }\n    }\n  }\n  return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  }\n  else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  }\n  else {\n    return buf.subarray(0, len);\n  }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find((c) => c.type === CELL_TYPE_ITEM && c.index === index);\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = { offset: 0, length: 0 };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxFooterHeight = 30;\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  componentWillLoad() {\n    console.warn(`[Deprecation Warning]: ion-virtual-scroll has been deprecated and will be removed in Ionic Framework v7.0. See https://ionicframework.com/docs/angular/virtual-scroll for migration steps.`);\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n  componentDidUpdate() {\n    this.updateState();\n  }\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifying by an offset and a length.\n   */\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n    const length = len === -1 ? this.items.length - offset : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    }\n    // unschedule future updates\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    }\n    // schedule DOM operations into the stencil queue\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n  readVS() {\n    const { contentEl, scrollEl, el } = this;\n    let topOffset = 0;\n    let node = el;\n    while (node !== null && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n    this.viewportOffset = topOffset;\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n  writeVS() {\n    const dirtyIndex = this.indexDirty;\n    // get visible viewport\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n    // compute lazily the height index\n    const heightIndex = this.getHeightIndex();\n    // get array bounds of visible cells base in the viewport\n    const range = getRange(heightIndex, viewport, 2);\n    // fast path, do nothing\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n    if (!shouldUpdate) {\n      return;\n    }\n    this.range = range;\n    // in place mutation of the virtual DOM\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\n    // Write DOM\n    // Different code paths taken depending of the render API used\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    }\n    else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    }\n    else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n    if (node) {\n      componentOnReady(node, update);\n    }\n    else {\n      update();\n    }\n  }\n  setCellHeight(cell, height) {\n    const index = cell.i;\n    // the cell might changed since the height update was scheduled\n    if (cell !== this.cells[index]) {\n      return;\n    }\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n  updateState() {\n    const shouldEnable = !!(this.scrollEl && this.cells.length > 0);\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n    return this.heightIndex;\n  }\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n    const scrollEl = this.scrollEl;\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n  renderVirtualNode(node) {\n    const { type, value, index } = node.cell;\n    switch (type) {\n      case CELL_TYPE_ITEM:\n        return this.renderItem(value, index);\n      case CELL_TYPE_HEADER:\n        return this.renderHeader(value, index);\n      case CELL_TYPE_FOOTER:\n        return this.renderFooter(value, index);\n    }\n  }\n  render() {\n    return (h(Host, { style: {\n        height: `${this.totalHeight}px`,\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map((node) => this.renderVirtualNode(node))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"itemHeight\": [\"itemsChanged\"],\n    \"headerHeight\": [\"itemsChanged\"],\n    \"footerHeight\": [\"itemsChanged\"],\n    \"items\": [\"itemsChanged\"]\n  }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n  });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"],"x_google_ignoreList":[0]}