{"version":3,"file":"2676.971909ac51f8b11a.js","mappings":"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","names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","disabledClonedInput","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","jsSetFocus","_ref","_asyncToGenerator","contentEl","footerEl","keyboardHeight","disableClonedInput","scrollData","getScrollData","_a","calcScrollData","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","closest","getBoundingClientRect","defaultView","innerHeight","focus","raf","click","window","scrollContentTimeout","scrollContent","_ref2","undefined","clearTimeout","removeEventListener","doubleKeyboardEventListener","scrollByPoint","apply","this","arguments","addEventListener","scrollEl","getScrollElement","scrollHeight","clientHeight","scrollTop","type","setTimeout","_x","_x2","_x3","_x4","_x5","PADDING_TIMER_KEY","setScrollPadding","_b","tagName","parentElement","el","findClosestIonContent","timer","setProperty","startInputShims","config","platform","doc","document","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","_ref3","Promise","resolve","componentOnReady","inputRoot","shadowRoot","querySelector","rmFn","enableHideCaretOnScroll","scrollHideCaret","shouldHideCaret","onBlur","showCaret","enableScrollAssist","coord","touchStart","ev","pointerCoord","touchEnd","endCoord","hasPointerMoved","threshold","startCoord","deltaX","x","deltaY","y","capture","passive","_x6","enableInputBlurring","focused","didScroll","onScroll","onFocusin","active","matches","tapped","target","blur","enableScrollPadding","detail","fn","unregisterInput"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/input-shims-8459e7d9.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getScrollElement, c as scrollByPoint, f as findClosestIonContent } from './index-e6d1a8be.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, p as pointerCoord, c as componentOnReady } from './helpers-3b390e48.js';\nimport './index-c4b11676.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n  }\n  else {\n    removeClone(componentEl, inputEl);\n  }\n};\n// TODO(FW-2832): type\nconst isFocused = (input) => {\n  return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode;\n  // DOM WRITES\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  /**\n   * Making the cloned input disabled prevents\n   * Chrome for Android from still scrolling\n   * the entire page since this cloned input\n   * will briefly be hidden by the keyboard\n   * even though it is not focused.\n   *\n   * This is not needed on iOS. While this\n   * does not cause functional issues on iOS,\n   * the input still appears slightly dimmed even\n   * if we set opacity: 1.\n   */\n  if (disabledClonedInput) {\n    clonedEl.disabled = true;\n  }\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n  const scrollHideCaret = (shouldHideCaret) => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n  const hideCaret = () => scrollHideCaret(true);\n  const showCaret = () => scrollHideCaret(false);\n  addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n  addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.removeEventListener('blur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n  const onScroll = () => {\n    didScroll = true;\n  };\n  const onFocusin = () => {\n    focused = true;\n  };\n  const onTouchend = (ev) => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n    const active = doc.activeElement;\n    if (!active) {\n      return;\n    }\n    // only blur if the active element is a text-input or a textarea\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    }\n    // if the selected target is the active element, do not blur\n    const tapped = ev.target;\n    if (tapped === active) {\n      return;\n    }\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n    focused = false;\n    // TODO FW-2796: find a better way, why 50ms?\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n  addEventListener(doc, 'ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    removeEventListener(doc, 'ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  var _a;\n  const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight // TODO(FW-2832): type\n  );\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom;\n  // compute visible area\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n  // compute safe area\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.75;\n  // figure out if each edge of the input is within the safe area\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop;\n  // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n  // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4,\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, disableClonedInput = false) => {\n  let coord;\n  const touchStart = (ev) => {\n    coord = pointerCoord(ev);\n  };\n  const touchEnd = (ev) => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    }\n    // get where the touchend/mouseup ended\n    const endCoord = pointerCoord(ev);\n    // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      // begin the input focus process\n      jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, disableClonedInput);\n    }\n  };\n  componentEl.addEventListener('touchstart', touchStart, { capture: true, passive: true });\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, disableClonedInput = false) => {\n  if (!contentEl && !footerEl) {\n    return;\n  }\n  const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight);\n  if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  }\n  // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n  inputEl.focus();\n  /**\n   * Relocating/Focusing input causes the\n   * click event to be cancelled, so\n   * manually fire one here.\n   */\n  raf(() => componentEl.click());\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.removeEventListener('ionKeyboardDidShow', scrollContent);\n      // scroll the input into place\n      if (contentEl) {\n        await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n      }\n      // the scroll view is in the correct position now\n      // give the native text input focus\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n      // ensure this is the focused input\n      inputEl.focus();\n    };\n    const doubleKeyboardEventListener = () => {\n      window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n      window.addEventListener('ionKeyboardDidShow', scrollContent);\n    };\n    if (contentEl) {\n      const scrollEl = await getScrollElement(contentEl);\n      /**\n       * scrollData will only consider the amount we need\n       * to scroll in order to properly bring the input\n       * into view. It will not consider the amount\n       * we can scroll in the content element.\n       * As a result, scrollData may request a greater\n       * scroll position than is currently available\n       * in the DOM. If this is the case, we need to\n       * wait for the webview to resize/the keyboard\n       * to show in order for additional scroll\n       * bandwidth to become available.\n       */\n      const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n      if (scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n        /**\n         * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n         * after the initial keyboard is shown. This prevents the webview from resizing\n         * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n         */\n        if (inputEl.type === 'password') {\n          // Add 50px to account for the \"Passwords\" bar\n          scrollData.scrollAmount += 50;\n          window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n        }\n        else {\n          window.addEventListener('ionKeyboardDidShow', scrollContent);\n        }\n        /**\n         * This should only fire in 2 instances:\n         * 1. The app is very slow.\n         * 2. The app is running in a browser on an old OS\n         * that does not support Ionic Keyboard Events\n         */\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n        return;\n      }\n    }\n    scrollContent();\n  }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = startCoord.x - endCoord.x;\n    const deltaY = startCoord.y - endCoord.y;\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n  const doc = document;\n  // TODO(FW-2832): types\n  const onFocusin = (ev) => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n  const onFocusout = (ev) => {\n    setScrollPadding(ev.target, 0);\n  };\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n  var _a, _b;\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n  if (((_b = (_a = input.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.tagName) === 'ION-SEARCHBAR') {\n    return;\n  }\n  const el = findClosestIonContent(input);\n  if (el === null) {\n    return;\n  }\n  const timer = el[PADDING_TIMER_KEY];\n  if (timer) {\n    clearTimeout(timer);\n  }\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  }\n  else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config, platform) => {\n  const doc = document;\n  const isIOS = platform === 'ios';\n  const isAndroid = platform === 'android';\n  /**\n   * Hide Caret and Input Blurring are needed on iOS.\n   * Scroll Assist and Scroll Padding are needed on iOS and Android\n   * with Chrome web browser (not Chrome webview).\n   */\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n  const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n  const registerInput = async (componentEl) => {\n    await new Promise((resolve) => componentOnReady(componentEl, resolve));\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = findClosestIonContent(componentEl);\n    const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n    if (!inputEl) {\n      return;\n    }\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n    /**\n     * date/datetime-locale inputs on mobile devices show date picker\n     * overlays instead of keyboards. As a result, scroll assist is\n     * not needed. This also works around a bug in iOS <16 where\n     * scroll assist causes the browser to lock up. See FW-1997.\n     */\n    const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n    if (!isDateInput &&\n      (!!scrollEl || !!footerEl) &&\n      scrollAssist &&\n      !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, isAndroid);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n  const unregisterInput = (componentEl) => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      hideCaretMap.delete(componentEl);\n    }\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n      if (fn) {\n        fn();\n      }\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  }\n  // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n  for (const input of inputs) {\n    registerInput(input);\n  }\n  // TODO(FW-2832): types\n  doc.addEventListener('ionInputDidLoad', ((ev) => {\n    registerInput(ev.detail);\n  }));\n  doc.addEventListener('ionInputDidUnload', ((ev) => {\n    unregisterInput(ev.detail);\n  }));\n};\n\nexport { startInputShims };\n"],"x_google_ignoreList":[0]}