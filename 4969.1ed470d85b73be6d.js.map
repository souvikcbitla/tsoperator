{"version":3,"file":"4969.1ed470d85b73be6d.js","mappings":"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","names":["DatetimeButton","constructor","hostRef","_this","this","registerInstance","datetimeEl","overlayEl","datetimePresentation","datetimeActive","color","disabled","getParsedDateValues","value","Array","isArray","setDateTimeText","locale","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","parseDate","length","getToday","firstParsedDatetime","use24Hour","is24Hour","forEach","parsedDatetime","tzOffset","undefined","dateText","timeText","getMonthDayAndYear","getLocalizedTime","headerText","e","printIonError","getMonthAndYear","getLocalizedDateTime","month","year","waitForDatetimeChanges","_asyncToGenerator","Promise","resolve","addEventListener","once","handleDateClick","_ref2","ev","needsPresentationChange","presentation","selectedButton","presentOverlay","dateTargetEl","_x","apply","arguments","handleTimeClick","timeTargetEl","_ref3","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","_x2","_x3","_x4","componentWillLoad","_this2","datetime","el","document","getElementById","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","componentOnReady","render","mode","getIonMode","h","Host","class","createColorClasses","a","id","onClick","part","ref","name","getElement","style","ios","md"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-8e692445.js';\nimport { b as getIonMode } from './ionic-global-c74e4951.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-3b390e48.js';\nimport { b as printIonError } from './index-c4b11676.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nimport { q as parseDate, t as getToday, J as is24Hour, S as getLocalizedDateTime, G as getMonthAndYear, K as getLocalizedTime, T as getMonthDayAndYear } from './data-caf38df0.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst DatetimeButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    this.datetimePresentation = 'date-time';\n    this.datetimeActive = false;\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, the user cannot interact with the button.\n     */\n    this.disabled = false;\n    /**\n     * Accepts one or more string values and converts\n     * them to DatetimeParts. This is done so datetime-button\n     * can work with an array internally and not need\n     * to keep checking if the datetime value is `string` or `string[]`.\n     */\n    this.getParsedDateValues = (value) => {\n      // TODO FW-2646 Remove value === ''\n      if (value === '' || value === undefined || value === null) {\n        return [];\n      }\n      if (Array.isArray(value)) {\n        return value;\n      }\n      return [value];\n    };\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const { value, locale, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n      const parsedValues = this.getParsedDateValues(value);\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n      /**\n       * If developers incorrectly use multiple=\"true\"\n       * with non \"date\" datetimes, then just select\n       * the first value so the interface does\n       * not appear broken. Datetime will provide a\n       * warning in the console.\n       */\n      const firstParsedDatetime = parsedDatetimes[0];\n      const use24Hour = is24Hour(locale, hourCycle);\n      // TODO(FW-1865) - Remove once FW-1831 is fixed.\n      parsedDatetimes.forEach((parsedDatetime) => {\n        parsedDatetime.tzOffset = undefined;\n      });\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          const timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          }\n          else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          if (multiple && parsedValues.length !== 1) {\n            let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n            if (titleSelectedDatesFormatter !== undefined) {\n              try {\n                headerText = titleSelectedDatesFormatter(parsedValues);\n              }\n              catch (e) {\n                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n              }\n            }\n            this.dateText = headerText;\n          }\n          else {\n            this.dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          }\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          break;\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, firstParsedDatetime);\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { month: 'long' });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { year: 'numeric' });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const { datetimeEl } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n        addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n      });\n    };\n    this.handleDateClick = async (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const { overlayEl } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n            ionShadowTarget: triggerEl,\n          } }));\n      }\n      else {\n        overlayEl.present();\n      }\n    };\n  }\n  async componentWillLoad() {\n    const { datetime } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver((entries) => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01,\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled,\n      }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n  }\n  get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n  ios: iosDatetimeButtonCss,\n  md: mdDatetimeButtonCss\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"],"x_google_ignoreList":[0]}