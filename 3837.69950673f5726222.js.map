{"version":3,"file":"3837.69950673f5726222.js","mappings":"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","names":["printIonWarning","message","params","console","warn","printIonError","error","printRequiredElementError","el","targetSelectors","tagName","toLowerCase","join","InfiniteScroll","constructor","hostRef","registerInstance","this","ionInfinite","createEvent","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","offsetHeight","scrollTop","height","scrollHeight","emit","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","_this","_asyncToGenerator","contentEl","findClosestIonContent","getScrollElement","writeTask","clientHeight","printIonContentErrorMsg","disconnectedCallback","undefined","complete","_this2","prev","requestAnimationFrame","readTask","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","getIonMode","h","Host","class","i","getElement","watchers","style","InfiniteScrollContent","customHTMLEnabled","config","get","ENABLE_HTML_CONTENT_DEFAULT","componentDidLoad","loadingSpinner","renderLoadingText","loadingText","innerHTML","sanitizeDOMString","name","ios","md"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/index-c4b11676.js","./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Logs a warning to the console with an Ionic prefix\n * to indicate the library that is warning the developer.\n *\n * @param message - The string message to be logged to the console.\n */\nconst printIonWarning = (message, ...params) => {\n  return console.warn(`[Ionic Warning]: ${message}`, ...params);\n};\n/*\n * Logs an error to the console with an Ionic prefix\n * to indicate the library that is warning the developer.\n *\n * @param message - The string message to be logged to the console.\n * @param params - Additional arguments to supply to the console.error.\n */\nconst printIonError = (message, ...params) => {\n  return console.error(`[Ionic Error]: ${message}`, ...params);\n};\n/**\n * Prints an error informing developers that an implementation requires an element to be used\n * within a specific selector.\n *\n * @param el The web component element this is requiring the element.\n * @param targetSelectors The selector or selectors that were not found.\n */\nconst printRequiredElementError = (el, ...targetSelectors) => {\n  return console.error(`<${el.tagName.toLowerCase()}> must be used inside ${targetSelectors.join(' or ')}.`);\n};\n\nexport { printRequiredElementError as a, printIonError as b, printIonWarning as p };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-8e692445.js';\nimport { b as getIonMode, c as config } from './ionic-global-c74e4951.js';\nimport { f as findClosestIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index-e6d1a8be.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-d4f612d2.js';\nimport './helpers-3b390e48.js';\nimport './index-c4b11676.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n    this.position = 'bottom';\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n      const infiniteHeight = this.el.offsetHeight;\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n      const distanceFromInfinite = this.position === 'bottom'\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n        : scrollTop - infiniteHeight - threshold;\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      }\n      else {\n        this.didFire = false;\n      }\n      return 4;\n    };\n  }\n  thresholdChanged() {\n    const val = this.threshold;\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    }\n    else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n  disabledChanged() {\n    const disabled = this.disabled;\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n    this.enableScrollEvents(!disabled);\n  }\n  async connectedCallback() {\n    const contentEl = findClosestIonContent(this.el);\n    if (!contentEl) {\n      printIonContentErrorMsg(this.el);\n      return;\n    }\n    this.scrollEl = await getScrollElement(contentEl);\n    this.thresholdChanged();\n    this.disabledChanged();\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n  async complete() {\n    const scrollEl = this.scrollEl;\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n    this.isLoading = false;\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true;\n      // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n      // ******** DOM READ ****************\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight;\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n          const newScrollTop = scrollHeight - prev;\n          // ******** DOM WRITE ****************\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n  canStart() {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      }\n      else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return (h(Host, { class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled,\n      } }));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"threshold\": [\"thresholdChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n};\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst InfiniteScrollContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n  }\n  componentDidLoad() {\n    if (this.loadingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n  renderLoadingText() {\n    const { customHTMLEnabled, loadingText } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(loadingText) });\n    }\n    return h(\"div\", { class: \"infinite-loading-text\" }, this.loadingText);\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { class: {\n        [mode]: true,\n        // Used internally for styling\n        [`infinite-scroll-content-${mode}`]: true,\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText !== undefined && this.renderLoadingText())));\n  }\n};\nInfiniteScrollContent.style = {\n  ios: infiniteScrollContentIosCss,\n  md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"],"x_google_ignoreList":[0,1]}