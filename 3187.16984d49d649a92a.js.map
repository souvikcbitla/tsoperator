{"version":3,"file":"3187.16984d49d649a92a.js","mappings":"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","names":["Route","constructor","hostRef","registerInstance","this","ionRouteDataChanged","createEvent","url","onUpdate","newValue","emit","onComponentProps","oldValue","keys1","Object","keys","keys2","length","key","connectedCallback","watchers","component","componentProps","RouteRedirect","ionRouteRedirectChanged","propDidChange","from","to","ROUTER_INTENT_NONE","ROUTER_INTENT_FORWARD","generatePath","segments","filter","s","join","parsePath","path","queryString","qsStart","indexOf","substring","split","map","trim","writeNavState","_ref","_asyncToGenerator","root","chain","direction","index","changed","animation","outlet","searchNavNode","Promise","resolve","componentOnReady","route","result","setRouteId","id","params","element","markVisible","e","console","error","_x","_x2","_x3","_x4","apply","arguments","readNavState","_ref2","ids","node","getRouteId","undefined","push","_x5","OUTLET_SELECTOR","matches","querySelector","findRouteRedirect","redirects","find","redirect","matchesRedirect","i","expected","matchesIDs","len","Math","min","score","routeId","routeChain","toLowerCase","routeIdParams","pathWithParams","j","matchesSegments","inputSegments","RouterSegments","allparams","matchesDefault","chainSegments","segment","data","next","slice","mergeParams","beforeEnter","beforeLeave","a","b","assign","findChainForSegments","chains","match","bestScore","matchedChain","computePriority","level","pow","shift","readProp","el","prop","hasAttribute","getAttribute","readRedirects","Array","children","tagName","readRoutes","flattenRouterTree","readRouteNodes","nodes","flattenNode","child","Router","ionRouteWillChange","ionRouteDidChange","previousPath","busy","state","lastState","useHash","componentWillLoad","_this","document","body","window","addEventListener","once","canProceed","runGuards","getSegments","setSegments","writeNavStateRoot","onRoutesChanged","componentDidLoad","debounce","onRedirectChanged","bind","onPopState","_this2","historyDirection","onBackButton","ev","detail","register","processNextHandler","back","canTransition","_this3","_this4","_a","startsWith","currentPath","URL","pathname","search","parsedPath","history","waitPromise","printDebug","_this5","routes","group","forEach","r","debug","groupEnd","printRoutes","printRedirects","navChanged","_this6","warn","findChainForIDs","maxMatches","param","chainToSegments","safeWriteNavState","win","replaceState","title","location","href","_this7","redirectFrom","toSegments","_this8","unlock","lock","_this9","p","_this10","fromChain","beforeLeaveHook","canLeave","toChain","beforeEnterHook","_this11","routeEvent","routeChangeEvent","writeSegments","generateUrl","pushState","readSegments","loc","prefix","hash","removePrefix","redirectFromSegments","redirectedFrom","getElement","RouterLink","routerDirection","onClick","openURL","routerAnimation","render","mode","getIonMode","attrs","rel","target","h","Host","class","createColorClasses","color","t","style","hostContext","selector","closest","cssClassMap","getClassMap","classes","getClassList","isArray","c","SCHEME","test","router","preventDefault"],"sourceRoot":"webpack:///","sources":["./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js","./node_modules/@ionic/core/dist/esm/theme-7670341c.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-8e692445.js';\nimport { c as componentOnReady, q as debounce } from './helpers-3b390e48.js';\nimport { b as getIonMode } from './ionic-global-c74e4951.js';\nimport { o as openURL, c as createColorClasses } from './theme-7670341c.js';\n\nconst Route = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\n/** Join the non empty segments with \"/\". */\nconst generatePath = (segments) => {\n  const path = segments.filter((s) => s.length > 0).join('/');\n  return '/' + path;\n};\nconst generateUrl = (segments, useHash, queryString) => {\n  let url = generatePath(segments);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url += '?' + queryString;\n  }\n  return url;\n};\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\n  const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\n/**\n * Transforms a chain to a list of segments.\n *\n * Notes:\n * - parameter segments of the form :param are replaced with their value,\n * - null is returned when a value is missing for any parameter segment.\n */\nconst chainToSegments = (chain) => {\n  const segments = [];\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        segments.push(param);\n      }\n      else if (segment !== '') {\n        segments.push(segment);\n      }\n    }\n  }\n  return segments;\n};\n/**\n * Removes the prefix segments from the path segments.\n *\n * Return:\n * - null when the path segments do not start with the passed prefix,\n * - the path segments after the prefix otherwise.\n */\nconst removePrefix = (prefix, segments) => {\n  if (prefix.length > segments.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return segments;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i] !== segments[i]) {\n      return null;\n    }\n  }\n  if (segments.length === prefix.length) {\n    return [''];\n  }\n  return segments.slice(prefix.length);\n};\nconst readSegments = (loc, root, useHash) => {\n  const prefix = parsePath(root).segments;\n  const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\n  const segments = parsePath(pathname).segments;\n  return removePrefix(prefix, segments);\n};\n/**\n * Parses the path to:\n * - segments an array of '/' separated parts,\n * - queryString (undefined when no query string).\n */\nconst parsePath = (path) => {\n  let segments = [''];\n  let queryString;\n  if (path != null) {\n    const qsStart = path.indexOf('?');\n    if (qsStart > -1) {\n      queryString = path.substring(qsStart + 1);\n      path = path.substring(0, qsStart);\n    }\n    segments = path\n      .split('/')\n      .map((s) => s.trim())\n      .filter((s) => s.length > 0);\n    if (segments.length === 0) {\n      segments = [''];\n    }\n  }\n  return { segments, queryString };\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const segments = [];\n    chain.forEach((r) => segments.push(...r.segments));\n    const ids = chain.map((r) => r.id);\n    console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\n/**\n * Activates the passed route chain.\n *\n * There must be exactly one outlet per route entry in the chain.\n *\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\n * setRouteId will create or select the view in the outlet.\n */\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise((resolve) => componentOnReady(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\n/**\n * Recursively walks the outlet in the DOM.\n *\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\n */\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // eslint-disable-next-line no-cond-assign\n  while ((outlet = searchNavNode(node))) {\n    const id = await outlet.getRouteId();\n    if (id) {\n      node = id.element;\n      id.element = undefined;\n      ids.push(id);\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\n  });\n};\n/** Selector for all the outlets supported by the router. */\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(OUTLET_SELECTOR)) {\n    return root;\n  }\n  const outlet = root.querySelector(OUTLET_SELECTOR);\n  return outlet !== null && outlet !== void 0 ? outlet : undefined;\n};\n\n/**\n * Returns whether the given redirect matches the given path segments.\n *\n * A redirect matches when the segments of the path and redirect.from are equal.\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\n */\nconst matchesRedirect = (segments, redirect) => {\n  const { from, to } = redirect;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > segments.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== segments[i]) {\n      return false;\n    }\n  }\n  return from.length === segments.length;\n};\n/** Returns the first redirect matching the path segments or undefined when no match found. */\nconst findRouteRedirect = (segments, redirects) => {\n  return redirects.find((redirect) => matchesRedirect(segments, redirect));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let score = 0;\n  for (let i = 0; i < len; i++) {\n    const routeId = ids[i];\n    const routeChain = chain[i];\n    // Skip results where the route id does not match the chain at the same index\n    if (routeId.id.toLowerCase() !== routeChain.id) {\n      break;\n    }\n    if (routeId.params) {\n      const routeIdParams = Object.keys(routeId.params);\n      // Only compare routes with the chain that have the same number of parameters.\n      if (routeIdParams.length === routeChain.segments.length) {\n        // Maps the route's params into a path based on the path variable names,\n        // to compare against the route chain format.\n        //\n        // Before:\n        // ```ts\n        // {\n        //  params: {\n        //    s1: 'a',\n        //    s2: 'b'\n        //  }\n        // }\n        // ```\n        //\n        // After:\n        // ```ts\n        // [':s1',':s2']\n        // ```\n        //\n        const pathWithParams = routeIdParams.map((key) => `:${key}`);\n        for (let j = 0; j < pathWithParams.length; j++) {\n          // Skip results where the path variable is not a match\n          if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\n            break;\n          }\n          // Weight path matches for the same index higher.\n          score++;\n        }\n      }\n    }\n    // Weight id matches\n    score++;\n  }\n  return score;\n};\n/**\n * Matches the segments against the chain.\n *\n * Returns:\n * - null when there is no match,\n * - a chain with the params properties updated with the parameter segments on match.\n */\nconst matchesSegments = (segments, chain) => {\n  const inputSegments = new RouterSegments(segments);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const chainSegments = chain[i].segments;\n    if (chainSegments[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of chainSegments) {\n        const data = inputSegments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      segments: route.segments,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave,\n    }));\n  }\n  return chain;\n};\n/**\n * Merges the route parameter objects.\n * Returns undefined when both parameters are undefined.\n */\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\n/**\n * Finds the best match for the ids in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the RouteIDs.\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\n */\nconst findChainForIDs = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  for (const chain of chains) {\n    const score = matchesIDs(ids, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => {\n      var _a;\n      return ({\n        id: route.id,\n        segments: route.segments,\n        params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\n      });\n    });\n  }\n  return null;\n};\n/**\n * Finds the best match for the segments in the chains.\n *\n * Returns the best match or null when no match is found.\n * When a chain is returned the parameters are updated from the segments.\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\n */\nconst findChainForSegments = (segments, chains) => {\n  let match = null;\n  let bestScore = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesSegments(segments, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > bestScore) {\n        bestScore = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\n/**\n * Computes the priority of a chain.\n *\n * Parameter segments are given a lower priority over fixed segments.\n *\n * Considering the following 2 chains matching the path /path/to/page:\n * - /path/to/:where\n * - /path/to/page\n *\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\n */\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const segment of route.segments) {\n      if (segment[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (segment !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(segments) {\n    this.segments = segments.slice();\n  }\n  next() {\n    if (this.segments.length > 0) {\n      return this.segments.shift();\n    }\n    return '';\n  }\n}\n\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\n/**\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\n *\n * The redirects are returned as a list of RouteRedirect.\n */\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map((el) => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')).segments,\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\n/**\n * Extracts all the routes (that is <ion-route> elements inside the root).\n *\n * The routes are returned as a list of chains - the flattened tree.\n */\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\n/**\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\n *\n * Note: routes without a component are ignored together with their children.\n */\nconst readRouteNodes = (node) => {\n  return Array.from(node.children)\n    .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\n    .map((el) => {\n    const component = readProp(el, 'component');\n    return {\n      segments: parsePath(readProp(el, 'url')).segments,\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(el),\n    };\n  });\n};\n/**\n * Flattens a RouterTree in a list of chains.\n *\n * Each chain represents a path from the root node to a terminal node.\n */\nconst flattenRouterTree = (nodes) => {\n  const chains = [];\n  for (const node of nodes) {\n    flattenNode([], chains, node);\n  }\n  return chains;\n};\n/** Flattens a route node recursively and push each branch to the chains list. */\nconst flattenNode = (chain, chains, node) => {\n  chain = [\n    ...chain,\n    {\n      id: node.id,\n      segments: node.segments,\n      params: node.params,\n      beforeLeave: node.beforeLeave,\n      beforeEnter: node.beforeEnter,\n    },\n  ];\n  if (node.children.length === 0) {\n    chains.push(chain);\n    return;\n  }\n  for (const child of node.children) {\n    flattenNode(chain, chains, child);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\n     * an alternate prefix for all URL paths.\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    await waitUntilNavNode();\n    const canProceed = await this.runGuards(this.getSegments());\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        const { redirect } = canProceed;\n        const path = parsePath(redirect);\n        this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\n        await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\n      }\n    }\n    else {\n      await this.onRoutesChanged();\n    }\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let segments = this.getSegments();\n    const canProceed = await this.runGuards(segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        segments = parsePath(canProceed.redirect).segments;\n      }\n      else {\n        return false;\n      }\n    }\n    return this.writeNavStateRoot(segments, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, (processNextHandler) => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified path.\n   *\n   * @param path The path to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(path, direction = 'forward', animation) {\n    var _a;\n    if (path.startsWith('.')) {\n      const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\n      // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\n      const url = new URL(path, `https://host/${currentPath}`);\n      path = url.pathname + url.search;\n    }\n    let parsedPath = parsePath(path);\n    const canProceed = await this.runGuards(parsedPath.segments);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        parsedPath = parsePath(canProceed.redirect);\n      }\n      else {\n        return false;\n      }\n    }\n    this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\n    return this.writeNavStateRoot(parsedPath.segments, direction, animation);\n  }\n  /** Go back to previous page in the window.history. */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = findChainForIDs(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map((i) => i.id));\n      return false;\n    }\n    const segments = chainToSegments(chain);\n    if (!segments) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    this.setSegments(segments, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\n    return true;\n  }\n  /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\n  onRedirectChanged() {\n    const segments = this.getSegments();\n    if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\n      this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\n    }\n  }\n  /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    var _a;\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    return ROUTER_INTENT_NONE;\n  }\n  async writeNavStateRoot(segments, direction, animation) {\n    if (!segments) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = findRouteRedirect(segments, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      const { segments: toSegments, queryString } = redirect.to;\n      this.setSegments(toSegments, direction, queryString);\n      redirectFrom = redirect.from;\n      segments = toSegments;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = findChainForSegments(segments, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise((r) => (resolve = r));\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  /**\n   * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\n   *\n   * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\n   * Otherwise the beforeEnterHook hook of the target route is executed.\n   */\n  async runGuards(to = this.getSegments(), from) {\n    if (from === undefined) {\n      from = parsePath(this.previousPath).segments;\n    }\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const fromChain = findChainForSegments(from, routes);\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const toChain = findChainForSegments(to, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    return beforeEnterHook ? beforeEnterHook() : true;\n  }\n  async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(segments, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setSegments(segments, direction, queryString) {\n    this.state++;\n    writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\n  }\n  getSegments() {\n    return readSegments(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(toSegments, redirectFromSegments) {\n    const from = this.previousPath;\n    const to = generatePath(toSegments);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target,\n    };\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'ion-activatable': true,\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst hostContext = (selector, el) => {\n  return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color, cssClassMap) => {\n  return typeof color === 'string' && color.length > 0\n    ? Object.assign({ 'ion-color': true, [`ion-color-${color}`]: true }, cssClassMap) : cssClassMap;\n};\nconst getClassList = (classes) => {\n  if (classes !== undefined) {\n    const array = Array.isArray(classes) ? classes : classes.split(' ');\n    return array\n      .filter((c) => c != null)\n      .map((c) => c.trim())\n      .filter((c) => c !== '');\n  }\n  return [];\n};\nconst getClassMap = (classes) => {\n  const map = {};\n  getClassList(classes).forEach((c) => (map[c] = true));\n  return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n  if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n    const router = document.querySelector('ion-router');\n    if (router) {\n      if (ev != null) {\n        ev.preventDefault();\n      }\n      return router.push(url, direction, animation);\n    }\n  }\n  return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"x_google_ignoreList":[0,1]}